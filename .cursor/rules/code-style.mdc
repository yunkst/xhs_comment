---
description: 
globs: 
alwaysApply: false
---
# 小红书评论维护系统代码风格指南

本项目采用统一的代码风格规范，以确保代码质量、可读性和可维护性。

## 通用规范

- **编码与行尾**: 所有文本文件使用UTF-8编码，LF作为行结束符。
- **行尾空行**: 文件末尾保留一个空行。
- **缩进**: 
    - 前端 (Vue, JS, CSS, HTML): 使用2空格缩进。
    - 后端 (Python): 使用4空格缩进。
- **行长度**: 
    - 前端: 建议不超过100字符。
    - 后端 (Python): 建议遵循Black默认的88字符，最大不超过120字符。
- **尾随空格**: 提交前应删除所有尾随空格。
- **注释**: 对复杂逻辑、重要决策或非显而易见的代码段添加清晰的注释。

## 前端代码规范 (Vue 3, JavaScript/TypeScript, CSS)

### 工具与格式化
- **ESLint & Prettier**: 强烈建议配置并使用ESLint进行代码质量检查，Prettier进行代码格式化，以保证风格统一。遵循项目根目录下的相应配置文件 (`.eslintrc.js`, `.prettierrc.js` 等)。

### 组件命名 (Vue)
- 组件文件名和组件名使用PascalCase (例如 `UserProfile.vue`, `<UserProfile />`)。
- 视图/页面级组件建议以 `View` 或 `Page` 结尾 (例如 `CommentListView.vue`, `SettingsPage.vue`)。
- 布局组件可以 `Layout` 结尾 (例如 `DashboardLayout.vue`)。

### Vue组件结构
- 遵循 `<template>`, `<script setup>`, `<style scoped>` 的标准顺序。
- `<script setup>` 是Vue 3推荐的组合式API写法。
- 优先使用 `scoped` 样式，以避免全局污染。
```vue
<template>
  <!-- 模板代码 -->
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
// import otherService from '@/services/otherService'
// import MyComponent from '@/components/MyComponent.vue'

// Props & Emits (if using defineProps/defineEmits)
// const props = defineProps({...})
// const emit = defineEmits([...])

// Reactive state
const message = ref('Hello')

// Computed properties
const reversedMessage = computed(() => message.value.split('').reverse().join(''))

// Methods
function greet() {
  console.log(message.value)
}

// Lifecycle hooks
onMounted(() => {
  console.log('Component mounted')
})
</script>

<style scoped>
/* CSS样式 */
.my-component {
  color: var(--el-color-primary);
}
</style>
```

### JavaScript/TypeScript规范
- 使用ES6+ (或TypeScript的相应特性)。
- 优先使用 `const`，仅在变量确实需要重新赋值时使用 `let`。避免使用 `var`。
- 异步操作统一使用 `async/await`。
- 适当使用解构赋值、展开运算符等现代JS特性简化代码。
- **模块化**: 清晰组织代码到模块和服务中 ([xhs_admin_ui/src/services/](mdc:xhs_admin_ui/src/services), [xhs_admin_ui/src/stores/](mdc:xhs_admin_ui/src/stores))。

### CSS规范
- 类名使用kebab-case (例如 `user-profile-card`)。
- 优先使用Element Plus提供的CSS变量和类，以保持UI一致性。
- 避免使用过于复杂的选择器。

## 后端代码规范 (Python, FastAPI)

### 工具与格式化
- **Black & isort**: 强烈建议使用 `black` 进行代码格式化，`isort` 进行导入排序。遵循项目配置 (如 `pyproject.toml`)。

### 命名规范
- **文件名**: snake_case (例如 `user_service.py`)。
- **类名**: PascalCase (例如 `UserService`, `UserCreate`)。
- **函数与方法名**: snake_case (例如 `get_user_by_id`)。
- **变量名**: snake_case。
- **常量名**: UPPER_SNAKE_CASE (例如 `DEFAULT_TIMEOUT`)。

### Python代码风格
- **PEP 8**: 严格遵循PEP 8风格指南。
- **类型注解**: 所有函数参数和返回值必须添加类型注解，Pydantic模型字段也需明确类型。
- **文档字符串 (Docstrings)**: 
    - 为所有公共模块、类、函数和方法编写清晰的Docstrings (Google风格或Numpy风格)。
    - FastAPI路径操作函数的Docstring会显示在API文档中。
- **异步优先**: 鉴于使用FastAPI和Motor，优先使用 `async def` 定义路径操作函数和所有I/O密集型操作。
- **FastAPI最佳实践**: 
    - 使用依赖注入 (Depends) 管理共享逻辑和资源。
    - 合理组织APIRouter。
    - 使用Pydantic模型进行请求/响应校验和序列化。

```python
from typing import List, Dict

class ItemService:
    async def get_item_by_id(self, item_id: int, current_user: User) -> Dict[str, any]: # User from models
        """
        Retrieves an item by its ID for the current user.

        Args:
            item_id: The ID of the item to retrieve.
            current_user: The currently authenticated user (injected dependency).

        Returns:
            A dictionary representing the item if found, otherwise raises HTTPException.
        """
        # db_item = await self.db.items.find_one({"_id": item_id, "owner_id": current_user.id})
        # if not db_item:
        #     raise HTTPException(status_code=404, detail="Item not found")
        # return item_helper(db_item) # Helper to convert DB object to dict
        pass # Placeholder
```

### API设计规范
- 遵循RESTful原则。
- HTTP方法应准确反映操作语义：GET (查询/读取), POST (创建), PUT (完整替换/更新), PATCH (部分更新), DELETE (删除)。
- API路径使用kebab-case，清晰表达资源层级。
- 统一错误处理和响应格式 (FastAPI通过异常处理器和Pydantic模型支持)。

## Git提交规范

- **格式化**: 提交前确保代码已经过格式化工具处理 (Prettier, Black)。
- **信息清晰**: 提交信息应简明扼要，清晰描述本次提交的目的和主要变更 (例如，遵循Conventional Commits规范)。
- **单一职责**: 每个提交应尽可能只包含一个逻辑相关的变更。
- **代码审查**: 重要或复杂的变更应经过代码审查流程。
