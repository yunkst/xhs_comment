---
description: 
globs: 
alwaysApply: false
---
# 认证与安全规范

## 核心认证机制

本项目后端主要依赖 **Keycloak** 进行身份和访问管理。前端应用和API客户端应通过OAuth 2.0/OpenID Connect流程与Keycloak集成以获取访问令牌。

- **Keycloak 配置**: 详细的Keycloak设置指南参见 [KEYCLOAK_SETUP.md](mdc:xhs_backend/KEYCLOAK_SETUP.md)。
- **后端认证集成**: FastAPI后端通过 [xhs_backend/api/auth/](mdc:xhs_backend/api/auth) 中的模块与Keycloak交互，验证JWT令牌。相关依赖和工具函数可能在 [xhs_backend/api/deps.py](mdc:xhs_backend/api/deps.py) 中定义。

## API 访问认证

1.  **用户访问后端API**: 用户通过前端登录Keycloak后，前端应用携带从Keycloak获取的JWT Bearer Token访问后端API。
2.  **插件到后端通信**: Chrome插件可能使用特定的API密钥或服务账户令牌（通过Keycloak或专门配置）进行认证。
    -   如果使用API密钥，需在Header中包含：`Authorization: Bearer <YOUR_API_SECRET_TOKEN>`。
    -   插件的认证配置（如令牌存储）在 [xhs_plugin_v2/options/](mdc:xhs_plugin_v2/options) 和 [xhs_plugin_v2/background/storage.js](mdc:xhs_plugin_v2/background/storage.js) 中管理。

## 旧有/辅助认证机制 (如适用)

-   **直接JWT+OTP**：如果系统仍保留不通过Keycloak的直接JWT和OTP认证方式：
    -   JWT创建和验证逻辑可能部分存在于 [xhs_backend/api/auth/](mdc:xhs_backend/api/auth) 或旧的 `main.py` 相关部分。
    -   用户相关的Pydantic模型主要在 [xhs_backend/api/models/user.py](mdc:xhs_backend/api/models/user.py) (或类似命名) 以及可能在 [xhs_backend/models.py](mdc:xhs_backend/models.py) 中。

## 安全最佳实践

1.  **环境变量保护**：
    -   敏感配置（如数据库连接字符串、Keycloak客户端密钥、API密钥）必须通过环境变量管理。
    -   不要将包含敏感信息的 `.env` 文件提交到版本控制。
2.  **CORS 安全**：
    -   在生产环境中，严格限制CORS来源，配置于 [xhs_backend/main.py](mdc:xhs_backend/main.py) 的FastAPI应用实例。
    -   Chrome插件开发时，确保 `manifest.json` 中配置了正确的权限和来源。
3.  **数据库安全**：
    -   生产环境中为MongoDB启用认证和授权。
    -   限制数据库端口只允许受信任的内部网络访问。
4.  **依赖安全**: 定期更新项目依赖，关注安全漏洞通告。

## 用户注册控制

-   如果系统支持直接注册（非Keycloak管理），环境变量 `ALLOW_REGISTER` (通常在 [xhs_backend/main.py](mdc:xhs_backend/main.py) 或相关配置模块中使用) 可能用于控制是否允许新用户注册。
-   通过Keycloak管理用户时，注册流程由Keycloak控制。
