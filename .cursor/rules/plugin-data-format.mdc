---
description:
globs:
alwaysApply: false
---
# 插件数据格式与API交互规范

## 数据类型和结构

浏览器插件处理并发送以下几种数据类型：

### 1. 通知数据
通知数据模型 [NotificationItem](mdc:xhs_backend/models.py) 包含：
```json
{
  "id": "通知唯一ID",
  "tabType": "通知类型（点赞/评论/关注等）",
  "userInfo": {
    "id": "用户ID",
    "name": "用户名称",
    "avatar": "头像URL",
    "url": "用户主页URL",
    "tag": "用户标签"
  },
  "interaction": {
    "type": "互动类型",
    "time": "互动时间"
  },
  "content": "通知内容文本",
  "quoteContent": "引用内容（如评论/笔记）",
  "extraImage": "附加图片URL",
  "timestamp": "通知获取时间"
}
```

### 2. 评论数据
评论数据模型 [CommentItem](mdc:xhs_backend/models.py) 包含：
```json
{
  "id": "评论唯一ID",
  "noteId": "所属笔记ID",
  "authorName": "评论作者名称",
  "authorUrl": "作者主页URL",
  "authorAvatar": "作者头像URL",
  "content": "评论内容",
  "repliedToUser": "回复对象用户名",
  "timestamp": "评论时间",
  "likeCount": "点赞数量",
  "ipLocation": "IP归属地",
  "replies": ["嵌套回复数组..."],
  "fetchTimestamp": "获取时间"
}
```

### 3. 笔记数据
笔记数据包含笔记的详细信息，如标题、内容、作者等。

### 4. 结构化评论
后端会将原始评论处理成扁平化的 [StructuredComment](mdc:xhs_backend/models.py)，添加字段：
- `commentId`: 评论ID
- `repliedId`: 回复的评论ID
- `repliedOrder`: 在回复链中的顺序
- `status`: 评论状态

## API请求格式

### 数据发送 (新API结构)
系统采用模块化API设计，根据数据类型使用不同的端点：

#### 1. 评论数据
- **端点**: `POST /api/comments/data`
- **认证**: Bearer Token (`Authorization: Bearer <JWT_TOKEN>`)
- **请求体**:
  ```json
  {
    "type": "评论",
    "data": [评论对象数组]
  }
  ```

#### 2. 通知数据
- **端点**: `POST /api/notifications/data`
- **认证**: Bearer Token (`Authorization: Bearer <JWT_TOKEN>`)
- **请求体**:
  ```json
  {
    "type": "通知",
    "data": [通知对象数组]
  }
  ```

#### 3. 笔记数据
- **端点**: `POST /api/notes/data`
- **认证**: Bearer Token (`Authorization: Bearer <JWT_TOKEN>`)
- **请求体**:
  ```json
  {
    "type": "笔记",
    "data": [笔记对象数组]
  }
  ```

### 用户评论查询
- **端点**: `GET /api/comments/user/{user_id}`
- **认证**: Bearer Token
- **返回**: 指定用户的所有评论历史列表

## 数据处理流程

1. 插件在 [content.js](mdc:xhs_chrome_plugin/content.js) 中抓取网页数据
2. 通过 [popup.js](mdc:xhs_chrome_plugin/popup.js) 中的函数发送至后端的特定端点
   - 评论数据 → `/api/comments/data`
   - 通知数据 → `/api/notifications/data` 
   - 笔记数据 → `/api/notes/data`
3. 后端在模块化的endpoints中接收数据:
   - [api/endpoints/comments.py](mdc:xhs_backend/api/endpoints/comments.py)
   - [api/endpoints/notifications.py](mdc:xhs_backend/api/endpoints/notifications.py)
   - [api/endpoints/notes.py](mdc:xhs_backend/api/endpoints/notes.py)
4. 评论数据经 [processing.py](mdc:xhs_backend/processing.py) 转换为结构化格式
5. 最终通过 [database.py](mdc:xhs_backend/database.py) 保存到MongoDB

## 插件更新指南

由于后端API结构调整，浏览器插件需要更新以适配新的端点。有两种方式：

### 1. 修改API配置
在插件设置页面中，根据数据类型配置不同的API端点：
- 评论数据：`http://<服务器地址>/api/comments/data`
- 通知数据：`http://<服务器地址>/api/notifications/data`
- 笔记数据：`http://<服务器地址>/api/notes/data`

### 2. 更新插件代码
如果插件不支持多端点配置，需要修改发送逻辑，根据数据类型动态选择API端点：

```javascript
// 修改后的数据发送函数
async function sendData(type, data) {
  let baseApiUrl = localStorage.getItem('baseApiUrl') || DEFAULT_BASE_API_URL;
  // 确保baseApiUrl不包含trailing slash
  baseApiUrl = baseApiUrl.replace(/\/$/, '');
  
  // 根据数据类型选择不同的API端点
  let apiUrl;
  if (type === "评论") {
    apiUrl = `${baseApiUrl}/api/comments/data`;
  } else if (type === "通知") {
    apiUrl = `${baseApiUrl}/api/notifications/data`;
  } else if (type === "笔记") {
    apiUrl = `${baseApiUrl}/api/notes/data`;
  } else {
    throw new Error(`不支持的数据类型: ${type}`);
  }
  
  const token = localStorage.getItem('apiToken') || '';
  
  const payload = {
    type: type,
    data: data
  };
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(payload)
  });
  
  return response.json();
}
