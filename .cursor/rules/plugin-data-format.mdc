---
description: 
globs: 
alwaysApply: false
---
# 插件数据格式与API交互规范

本文档定义了浏览器插件 ([xhs_plugin_v2](mdc:xhs_plugin_v2)) 与后端API交互时使用的数据格式、API端点模式以及相关处理流程。

## 数据模型定义

所有数据模型均使用Pydantic在后端定义，位于 [xhs_backend/api/models/](mdc:xhs_backend/api/models) 目录下的相应模块中。

### 1. 通知数据 (示例结构)
-   对应模型如 `NotificationItem` (在 [xhs_backend/api/models/notification.py](mdc:xhs_backend/api/models/notification.py) 中查找)。
```json
{
  "id": "通知唯一ID",
  "tabType": "通知类型（点赞/评论/关注等）",
  "userInfo": {
    "id": "用户ID",
    "name": "用户名称",
    "avatar": "头像URL",
    "url": "用户主页URL",
    "tag": "用户标签"
  },
  "interaction": {
    "type": "互动类型",
    "time": "互动时间"
  },
  "content": "通知内容文本",
  "quoteContent": "引用内容（如评论/笔记）",
  "extraImage": "附加图片URL",
  "timestamp": "通知获取时间"
}
```

### 2. 评论数据 (示例结构)
-   对应模型如 `CommentItem` / `CommentCreate` (在 [xhs_backend/api/models/content.py](mdc:xhs_backend/api/models/content.py) 中查找)。
```json
{
  "id": "评论唯一ID (由插件生成或为空，后端可能重新生成)",
  "noteId": "所属笔记ID",
  "authorName": "评论作者名称",
  "authorUrl": "作者主页URL",
  "authorAvatar": "作者头像URL",
  "content": "评论内容",
  "repliedToUser": "回复对象用户名",
  "timestamp": "评论时间 (ISO格式字符串)",
  "likeCount": "点赞数量",
  "ipLocation": "IP归属地",
  "replies": [], // 嵌套回复通常由后端处理，插件可能只发送顶层评论
  "fetchTimestamp": "获取时间 (ISO格式字符串)"
}
```

### 3. 笔记数据 (示例结构)
-   对应模型如 `NoteItem` (在 [xhs_backend/api/models/content.py](mdc:xhs_backend/api/models/content.py) 中查找)。
-   包含笔记的详细信息，如标题、内容、作者、发布时间等。

### 4. 网络数据 (插件数据提交格式)
-   对应模型如 `NetworkDataItem` (在 [xhs_backend/api/models/network.py](mdc:xhs_backend/api/models/network.py) 中查找)。
```json
{
  "url": "请求URL",
  "method": "HTTP方法 (GET/POST等)",
  "headers": "请求头对象",
  "requestData": "请求体数据",
  "responseData": "响应数据",
  "timestamp": "请求时间戳 (ISO格式)",
  "source": "数据来源标识 (如 'xhs_plugin_v2')",
  "ruleMatched": "匹配的抓取规则名称"
}
```

## API请求格式与端点

-   **权威API参考**: 请始终参考后端FastAPI自动生成的OpenAPI文档 (通常位于 `/docs` 或 `/redoc`) 获取最新的API端点、请求/响应模型和参数。
-   **认证**: 插件专用端点无需认证，管理端点需要Bearer Token认证。参考 [.cursor/rules/auth-security.mdc](mdc:.cursor/rules/auth-security.mdc)。

### 插件专用端点 (无需认证)

**抓取规则获取**:
- **端点**: `GET /api/v1/system/capture-rules`
- **描述**: 获取启用的抓取规则，供插件动态配置
- **响应**: 抓取规则数组

**网络数据提交**:
- **端点**: `POST /api/v1/system/network-data`
- **描述**: 插件提交抓取的网络请求数据
- **请求体**: 网络数据对象或数组

**健康检查**:
- **端点**: `GET /api/v1/system/health`
- **描述**: 检查API服务状态

### 管理端点 (需要认证)

**获取所有规则**:
- **端点**: `GET /api/v1/system/capture-rules/all`
- **描述**: 获取所有抓取规则（包括禁用的）

**查询网络数据**:
- **端点**: `GET /api/v1/system/network-data`
- **描述**: 查询已收集的网络数据，支持分页和过滤

## 数据处理流程 (概览)

1.  **插件抓取**: 插件内容脚本 ([xhs_plugin_v2/content/index.js](mdc:xhs_plugin_v2/content/index.js)) 注入监控脚本到小红书网页。
2.  **网络拦截**: 注入脚本 ([xhs_plugin_v2/injected/](mdc:xhs_plugin_v2/injected)) 拦截网络请求：
    -   Fetch拦截: [xhs_plugin_v2/injected/fetch.js](mdc:xhs_plugin_v2/injected/fetch.js)
    -   XHR拦截: [xhs_plugin_v2/injected/xhr.js](mdc:xhs_plugin_v2/injected/xhr.js)
    -   增强拦截器: [xhs_plugin_v2/enhanced_interceptor.js](mdc:xhs_plugin_v2/enhanced_interceptor.js)
3.  **规则匹配**: 后台脚本 ([xhs_plugin_v2/background/](mdc:xhs_plugin_v2/background)) 根据抓取规则过滤和处理数据。
4.  **数据发送**: 插件通过API服务 ([xhs_plugin_v2/injected/api-service.js](mdc:xhs_plugin_v2/injected/api-service.js)) 将数据发送到后端。
5.  **后端处理**: 后端API接收数据并通过服务层 ([xhs_backend/api/services/](mdc:xhs_backend/api/services)) 进行处理和存储。

## 插件API配置与更新指南

### 1. API端点配置
-   插件允许用户在配置页面 ([xhs_plugin_v2/options.html](mdc:xhs_plugin_v2/options.html)) 中设置后端API的基础URL。
-   配置管理由选项脚本 ([xhs_plugin_v2/options/](mdc:xhs_plugin_v2/options)) 处理。
-   具体的API路径基于基础URL拼接，遵循模块化API结构。

### 2. 插件数据发送逻辑

插件中的数据发送功能主要由以下模块实现：

```javascript
// 示例：插件中的数据发送函数 (位于 api-service.js)
async function sendNetworkDataToBackend(networkData) {
  // 从存储中获取API配置
  const apiConfig = await getApiConfig();
  
  if (!apiConfig || !apiConfig.baseUrl) {
    console.error('[API Service] API基础URL未配置');
    return { success: false, error: 'API基础URL未配置' };
  }

  const apiUrl = `${apiConfig.baseUrl}/api/v1/system/network-data`;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // 插件专用端点无需认证
      },
      body: JSON.stringify(networkData)
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ 
        detail: response.statusText 
      }));
      console.error(`[API Service] API错误 (${response.status}):`, errorData);
      return { 
        success: false, 
        status: response.status, 
        error: errorData.detail || '未知API错误' 
      };
    }

    return { success: true, data: await response.json() };
  } catch (error) {
    console.error('[API Service] 网络错误:', error);
    return { success: false, error: error.message || '网络错误' };
  }
}
```

### 3. 抓取规则动态获取

```javascript
// 示例：获取抓取规则 (位于 background/api.js)
async function loadCaptureRules() {
  const apiConfig = globalState.apiConfig;
  
  if (!apiConfig || !apiConfig.baseUrl) {
    console.warn('[Background] API未配置，使用默认抓取规则');
    return;
  }

  try {
    const response = await fetch(`${apiConfig.baseUrl}/api/v1/system/capture-rules`);
    
    if (response.ok) {
      const rules = await response.json();
      globalState.captureRules = rules.filter(rule => rule.enabled);
      console.log(`[Background] 已加载 ${globalState.captureRules.length} 条抓取规则`);
    } else {
      console.error('[Background] 加载抓取规则失败:', response.status);
    }
  } catch (error) {
    console.error('[Background] 加载抓取规则时发生网络错误:', error);
  }
}
```

## 用户界面功能

### 1. 通知页面功能
-   **通知处理器**: [xhs_plugin_v2/injected/notification-handler.js](mdc:xhs_plugin_v2/injected/notification-handler.js) 处理小红书通知页面的交互。
-   **用户备注**: [xhs_plugin_v2/injected/user-notes.js](mdc:xhs_plugin_v2/injected/user-notes.js) 提供用户备注功能。
-   **对话框管理**: [xhs_plugin_v2/injected/dialog-manager.js](mdc:xhs_plugin_v2/injected/dialog-manager.js) 管理弹窗和历史评论显示。

### 2. 插件UI界面
-   **弹窗界面**: [xhs_plugin_v2/popup.html](mdc:xhs_plugin_v2/popup.html) 和相关脚本提供插件主界面。
-   **配置界面**: [xhs_plugin_v2/options.html](mdc:xhs_plugin_v2/options.html) 提供API配置和SSO登录。
-   **日志界面**: [xhs_plugin_v2/logs.html](mdc:xhs_plugin_v2/logs.html) 显示请求日志和调试信息。

## 版本信息

当前插件版本: **v2.4.0** (见 [xhs_plugin_v2/manifest.json](mdc:xhs_plugin_v2/manifest.json))

主要特性:
- 网络请求监控和数据抓取
- 用户备注功能
- 历史评论查看
- SSO单点登录支持
- 动态抓取规则配置
