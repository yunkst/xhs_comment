---
description:
globs:
alwaysApply: false
---
# 插件数据格式与API交互规范

## 数据类型和结构

浏览器插件处理并发送以下几种数据类型：

### 1. 通知数据
通知数据模型 [NotificationItem](mdc:xhs_backend/models.py) 包含：
```json
{
  "id": "通知唯一ID",
  "tabType": "通知类型（点赞/评论/关注等）",
  "userInfo": {
    "id": "用户ID",
    "name": "用户名称",
    "avatar": "头像URL",
    "url": "用户主页URL",
    "tag": "用户标签"
  },
  "interaction": {
    "type": "互动类型",
    "time": "互动时间"
  },
  "content": "通知内容文本",
  "quoteContent": "引用内容（如评论/笔记）",
  "extraImage": "附加图片URL",
  "timestamp": "通知获取时间"
}
```

### 2. 评论数据
评论数据模型 [CommentItem](mdc:xhs_backend/models.py) 包含：
```json
{
  "id": "评论唯一ID",
  "noteId": "所属笔记ID",
  "authorName": "评论作者名称",
  "authorUrl": "作者主页URL",
  "authorAvatar": "作者头像URL",
  "content": "评论内容",
  "repliedToUser": "回复对象用户名",
  "timestamp": "评论时间",
  "likeCount": "点赞数量",
  "ipLocation": "IP归属地",
  "replies": ["嵌套回复数组..."],
  "fetchTimestamp": "获取时间"
}
```

### 3. 结构化评论
后端会将原始评论处理成扁平化的 [StructuredComment](mdc:xhs_backend/models.py)，添加字段：
- `commentId`: 评论ID
- `repliedId`: 回复的评论ID
- `repliedOrder`: 在回复链中的顺序

## API请求格式

### 数据发送
- **端点**: `POST /api/data`
- **认证**: Bearer Token (`Authorization: Bearer <API_SECRET_TOKEN>`)
- **请求体**:
  ```json
  {
    "type": "通知" | "评论" | "笔记",
    "data": [数据对象数组]
  }
  ```

### 用户评论查询
- **端点**: `GET /api/user/{user_id}/comments`
- **认证**: Bearer Token
- **返回**: 指定用户的所有评论历史列表

## 数据处理流程

1. 插件在 [content.js](mdc:xhs_chrome_plugin/content.js) 中抓取网页数据
2. 通过 [popup.js](mdc:xhs_chrome_plugin/popup.js) 中的函数发送至后端
3. 后端在 [main.py](mdc:xhs_backend/main.py) 接收并验证数据
4. 评论数据经 [processing.py](mdc:xhs_backend/processing.py) 转换为结构化格式
5. 最终通过 [database.py](mdc:xhs_backend/database.py) 保存到MongoDB
