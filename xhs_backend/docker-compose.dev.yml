services:
  mongo:
    image: crpi-v2c8hiamyw0hvcvs.cn-hangzhou.personal.cr.aliyuncs.com/open_ydz/mongo:latest # Use the official MongoDB image
    container_name: mongodb_service
    # ports:
    #   - "27017:27017" # Map host port to container port if external access needed
    volumes:
      - mongo_data:/data/db # Persist MongoDB data
    # Optional: Add environment variables for MongoDB authentication if needed
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - app-network

  redis: # 添加 Redis 服务（开发环境）
    image: redis:alpine # 使用官方的 Redis Alpine 镜像
    container_name: redis_service_dev
    volumes:
      - redis_data:/data # 持久化 Redis 数据
    networks:
      - app-network
    healthcheck: # 添加健康检查
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: 
      context: . # Build the image from the Dockerfile in the current directory
      dockerfile: Dockerfile.dev # Use the Dockerfile.dev file
    container_name: xhs_backend_app
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    volumes:
      - .:/app # Mount current directory to /app in container for live code changes (dev)

    depends_on:
      - mongo # Ensure mongo starts before the app
    networks:
      - app-network
    env_file:
      - .env # Load all variables from .env file

    # env_file:
    #   - .env # Alternatively, load all variables from .env file

networks:
  app-network:
    external: true
    name: app-network 

volumes:
  mongo_data: # Define the named volume for MongoDB data 
  redis_data: # 添加 Redis 数据卷 